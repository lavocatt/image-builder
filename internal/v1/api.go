// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Defines values for Distributions.
const (
	Centos8      Distributions = "centos-8"
	Centos9      Distributions = "centos-9"
	Fedora37     Distributions = "fedora-37"
	Fedora38     Distributions = "fedora-38"
	Fedora39     Distributions = "fedora-39"
	Rhel8        Distributions = "rhel-8"
	Rhel84       Distributions = "rhel-84"
	Rhel85       Distributions = "rhel-85"
	Rhel86       Distributions = "rhel-86"
	Rhel87       Distributions = "rhel-87"
	Rhel88       Distributions = "rhel-88"
	Rhel8Nightly Distributions = "rhel-8-nightly"
	Rhel9        Distributions = "rhel-9"
	Rhel90       Distributions = "rhel-90"
	Rhel91       Distributions = "rhel-91"
	Rhel92       Distributions = "rhel-92"
	Rhel9Nightly Distributions = "rhel-9-nightly"
)

// Defines values for ImageRequestArchitecture.
const (
	Aarch64 ImageRequestArchitecture = "aarch64"
	X8664   ImageRequestArchitecture = "x86_64"
)

// Defines values for ImageStatusStatus.
const (
	ImageStatusStatusBuilding    ImageStatusStatus = "building"
	ImageStatusStatusFailure     ImageStatusStatus = "failure"
	ImageStatusStatusPending     ImageStatusStatus = "pending"
	ImageStatusStatusRegistering ImageStatusStatus = "registering"
	ImageStatusStatusSuccess     ImageStatusStatus = "success"
	ImageStatusStatusUploading   ImageStatusStatus = "uploading"
)

// Defines values for ImageTypes.
const (
	ImageTypesAmi               ImageTypes = "ami"
	ImageTypesAws               ImageTypes = "aws"
	ImageTypesAzure             ImageTypes = "azure"
	ImageTypesEdgeCommit        ImageTypes = "edge-commit"
	ImageTypesEdgeInstaller     ImageTypes = "edge-installer"
	ImageTypesGcp               ImageTypes = "gcp"
	ImageTypesGuestImage        ImageTypes = "guest-image"
	ImageTypesImageInstaller    ImageTypes = "image-installer"
	ImageTypesRhelEdgeCommit    ImageTypes = "rhel-edge-commit"
	ImageTypesRhelEdgeInstaller ImageTypes = "rhel-edge-installer"
	ImageTypesVhd               ImageTypes = "vhd"
	ImageTypesVsphere           ImageTypes = "vsphere"
	ImageTypesVsphereOva        ImageTypes = "vsphere-ova"
	ImageTypesWsl               ImageTypes = "wsl"
)

// Defines values for UploadStatusStatus.
const (
	UploadStatusStatusFailure UploadStatusStatus = "failure"
	UploadStatusStatusPending UploadStatusStatus = "pending"
	UploadStatusStatusRunning UploadStatusStatus = "running"
	UploadStatusStatusSuccess UploadStatusStatus = "success"
)

// Defines values for UploadTypes.
const (
	UploadTypesAws   UploadTypes = "aws"
	UploadTypesAwsS3 UploadTypes = "aws.s3"
	UploadTypesAzure UploadTypes = "azure"
	UploadTypesGcp   UploadTypes = "gcp"
)

// AWSEC2Clone defines model for AWSEC2Clone.
type AWSEC2Clone struct {
	// A region as described in
	// https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-regions
	Region string `json:"region"`

	// An array of AWS account IDs as described in
	// https://docs.aws.amazon.com/IAM/latest/UserGuide/console_account-alias.html
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
	ShareWithSources  *[]string `json:"share_with_sources,omitempty"`
}

// AWSS3UploadRequestOptions defines model for AWSS3UploadRequestOptions.
type AWSS3UploadRequestOptions = map[string]interface{}

// AWSS3UploadStatus defines model for AWSS3UploadStatus.
type AWSS3UploadStatus struct {
	Url string `json:"url"`
}

// AWSUploadRequestOptions defines model for AWSUploadRequestOptions.
type AWSUploadRequestOptions struct {
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
	ShareWithSources  *[]string `json:"share_with_sources,omitempty"`
}

// AWSUploadStatus defines model for AWSUploadStatus.
type AWSUploadStatus struct {
	Ami    string `json:"ami"`
	Region string `json:"region"`
}

// ArchitectureItem defines model for ArchitectureItem.
type ArchitectureItem struct {
	Arch       string   `json:"arch"`
	ImageTypes []string `json:"image_types"`

	// Base repositories for the given distribution and architecture.
	Repositories []Repository `json:"repositories"`
}

// Architectures defines model for Architectures.
type Architectures = []ArchitectureItem

// AzureUploadRequestOptions defines model for AzureUploadRequestOptions.
type AzureUploadRequestOptions struct {
	// Name of the created image.
	// Must begin with a letter or number, end with a letter, number or underscore, and may contain only letters, numbers, underscores, periods, or hyphens.
	// The total length is limited to 60 characters.
	ImageName *string `json:"image_name,omitempty"`

	// Name of the resource group where the image should be uploaded.
	ResourceGroup string `json:"resource_group"`

	// ID of the source that will be used to resolve the tenant and subscription IDs.
	// Do not provide a tenant_id or subscription_id when providing a source_id.
	SourceId *string `json:"source_id,omitempty"`

	// ID of subscription where the image should be uploaded.
	// When providing a subscription_id, also be sure to provide a tenant_id and do not include a source_id.
	SubscriptionId *string `json:"subscription_id,omitempty"`

	// ID of the tenant where the image should be uploaded. This link explains how
	// to find it in the Azure Portal:
	// https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant
	// When providing a tenant_id, also be sure to provide a subscription_id and do not include a source_id.
	TenantId *string `json:"tenant_id,omitempty"`
}

// AzureUploadStatus defines model for AzureUploadStatus.
type AzureUploadStatus struct {
	ImageName string `json:"image_name"`
}

// CloneRequest defines model for CloneRequest.
type CloneRequest interface{}

// CloneResponse defines model for CloneResponse.
type CloneResponse struct {
	Id openapi_types.UUID `json:"id"`
}

// ClonesResponse defines model for ClonesResponse.
type ClonesResponse struct {
	Data  []ClonesResponseItem `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// ClonesResponseItem defines model for ClonesResponseItem.
type ClonesResponseItem struct {
	// UUID of the parent compose of the clone
	ComposeId openapi_types.UUID `json:"compose_id"`
	CreatedAt string             `json:"created_at"`
	Id        openapi_types.UUID `json:"id"`
	Request   CloneRequest       `json:"request"`
}

// ComposeMetadata defines model for ComposeMetadata.
type ComposeMetadata struct {
	// ID (hash) of the built commit
	OstreeCommit *string `json:"ostree_commit,omitempty"`

	// Package list including NEVRA
	Packages *[]PackageMetadata `json:"packages,omitempty"`
}

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	Customizations   *Customizations `json:"customizations,omitempty"`
	Distribution     Distributions   `json:"distribution"`
	ImageDescription *string         `json:"image_description,omitempty"`
	ImageName        *string         `json:"image_name,omitempty"`

	// Array of exactly one image request. Having more image requests in one compose is currently not supported.
	ImageRequests []ImageRequest `json:"image_requests"`
}

// ComposeResponse defines model for ComposeResponse.
type ComposeResponse struct {
	Id openapi_types.UUID `json:"id"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	ImageStatus ImageStatus    `json:"image_status"`
	Request     ComposeRequest `json:"request"`
}

// ComposeStatusError defines model for ComposeStatusError.
type ComposeStatusError struct {
	Details *interface{} `json:"details,omitempty"`
	Id      int          `json:"id"`
	Reason  string       `json:"reason"`
}

// ComposesResponse defines model for ComposesResponse.
type ComposesResponse struct {
	Data  []ComposesResponseItem `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// ComposesResponseItem defines model for ComposesResponseItem.
type ComposesResponseItem struct {
	CreatedAt string             `json:"created_at"`
	Id        openapi_types.UUID `json:"id"`
	ImageName *string            `json:"image_name,omitempty"`
	Request   ComposeRequest     `json:"request"`
}

// Repository configuration for custom repositories.
// At least one of the 'baseurl', 'mirrorlist', 'metalink' properties must
// be specified. If more of them are specified, the order of precedence is
// the same as listed above. Id is required.
type CustomRepository struct {
	Baseurl      *[]string `json:"baseurl,omitempty"`
	CheckGpg     *bool     `json:"check_gpg,omitempty"`
	CheckRepoGpg *bool     `json:"check_repo_gpg,omitempty"`
	Enabled      *bool     `json:"enabled,omitempty"`
	Filename     *string   `json:"filename,omitempty"`

	// GPG key used to sign packages in this repository. Can be a gpg key or a URL
	Gpgkey     *[]string `json:"gpgkey,omitempty"`
	Id         string    `json:"id"`
	Metalink   *string   `json:"metalink,omitempty"`
	Mirrorlist *string   `json:"mirrorlist,omitempty"`
	Name       *string   `json:"name,omitempty"`
	Priority   *int      `json:"priority,omitempty"`
	SslVerify  *bool     `json:"ssl_verify,omitempty"`
}

// Customizations defines model for Customizations.
type Customizations struct {
	CustomRepositories  *[]CustomRepository `json:"custom_repositories,omitempty"`
	Filesystem          *[]Filesystem       `json:"filesystem,omitempty"`
	Openscap            *OpenSCAP           `json:"openscap,omitempty"`
	Packages            *[]string           `json:"packages,omitempty"`
	PayloadRepositories *[]Repository       `json:"payload_repositories,omitempty"`
	Subscription        *Subscription       `json:"subscription,omitempty"`

	// list of users that a customer can add, also specifying their respective groups and SSH keys
	Users *[]User `json:"users,omitempty"`
}

// DistributionItem defines model for DistributionItem.
type DistributionItem struct {
	Description string `json:"description"`
	Name        string `json:"name"`
}

// Distributions defines model for Distributions.
type Distributions string

// DistributionsResponse defines model for DistributionsResponse.
type DistributionsResponse = []DistributionItem

// Filesystem defines model for Filesystem.
type Filesystem struct {
	// size of the filesystem in bytes
	MinSize    uint64 `json:"min_size"`
	Mountpoint string `json:"mountpoint"`
}

// GCPUploadRequestOptions defines model for GCPUploadRequestOptions.
type GCPUploadRequestOptions struct {
	// List of valid Google accounts to share the imported Compute Node image with.
	// Each string must contain a specifier of the account type. Valid formats are:
	//   - 'user:{emailid}': An email address that represents a specific
	//     Google account. For example, 'alice@example.com'.
	//   - 'serviceAccount:{emailid}': An email address that represents a
	//     service account. For example, 'my-other-app@appspot.gserviceaccount.com'.
	//   - 'group:{emailid}': An email address that represents a Google group.
	//     For example, 'admins@example.com'.
	//   - 'domain:{domain}': The G Suite domain (primary) that represents all
	//     the users of that domain. For example, 'google.com' or 'example.com'.
	//     If not specified, the imported Compute Node image is not shared with any
	//     account.
	ShareWithAccounts []string `json:"share_with_accounts"`
}

// GCPUploadStatus defines model for GCPUploadStatus.
type GCPUploadStatus struct {
	ImageName string `json:"image_name"`
	ProjectId string `json:"project_id"`
}

// HTTPError defines model for HTTPError.
type HTTPError struct {
	Detail string `json:"detail"`
	Title  string `json:"title"`
}

// HTTPErrorList defines model for HTTPErrorList.
type HTTPErrorList struct {
	Errors []HTTPError `json:"errors"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {
	// CPU architecture of the image, x86_64 and aarch64 are currently supported.
	Architecture ImageRequestArchitecture `json:"architecture"`
	ImageType    ImageTypes               `json:"image_type"`
	Ostree       *OSTree                  `json:"ostree,omitempty"`

	// Size of image, in bytes. When set to 0 the image size is a minimum
	// defined by the image type.
	Size          *uint64       `json:"size,omitempty"`
	UploadRequest UploadRequest `json:"upload_request"`
}

// CPU architecture of the image, x86_64 and aarch64 are currently supported.
type ImageRequestArchitecture string

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Error        *ComposeStatusError `json:"error,omitempty"`
	Status       ImageStatusStatus   `json:"status"`
	UploadStatus *UploadStatus       `json:"upload_status,omitempty"`
}

// ImageStatusStatus defines model for ImageStatus.Status.
type ImageStatusStatus string

// ImageTypes defines model for ImageTypes.
type ImageTypes string

// OSTree defines model for OSTree.
type OSTree struct {
	// A URL which, if set, is used for fetching content. Implies that `url` is set as well,
	// which will be used for metadata only.
	Contenturl *string `json:"contenturl,omitempty"`

	// Can be either a commit (example: 02604b2da6e954bd34b8b82a835e5a77d2b60ffa), or a branch-like reference (example: rhel/8/x86_64/edge)
	Parent *string `json:"parent,omitempty"`
	Ref    *string `json:"ref,omitempty"`

	// Determines whether a valid subscription manager (candlepin) identity is required to
	// access this repository. Consumer certificates will be used as client certificates when
	// fetching metadata and content.
	Rhsm *bool   `json:"rhsm,omitempty"`
	Url  *string `json:"url,omitempty"`
}

// OpenSCAP defines model for OpenSCAP.
type OpenSCAP struct {
	ProfileId string `json:"profile_id"`
}

// Package defines model for Package.
type Package struct {
	Name    string `json:"name"`
	Summary string `json:"summary"`
}

// PackageMetadata defines model for PackageMetadata.
type PackageMetadata struct {
	Arch      string  `json:"arch"`
	Epoch     *string `json:"epoch,omitempty"`
	Name      string  `json:"name"`
	Release   string  `json:"release"`
	Sigmd5    string  `json:"sigmd5"`
	Signature *string `json:"signature,omitempty"`
	Type      string  `json:"type"`
	Version   string  `json:"version"`
}

// PackagesResponse defines model for PackagesResponse.
type PackagesResponse struct {
	Data  []Package `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// Readiness defines model for Readiness.
type Readiness struct {
	Readiness string `json:"readiness"`
}

// Repository defines model for Repository.
type Repository struct {
	Baseurl  *string `json:"baseurl,omitempty"`
	CheckGpg *bool   `json:"check_gpg,omitempty"`

	// Enables gpg verification of the repository metadata
	CheckRepoGpg *bool   `json:"check_repo_gpg,omitempty"`
	Gpgkey       *string `json:"gpgkey,omitempty"`
	IgnoreSsl    *bool   `json:"ignore_ssl,omitempty"`
	Metalink     *string `json:"metalink,omitempty"`
	Mirrorlist   *string `json:"mirrorlist,omitempty"`
	Rhsm         bool    `json:"rhsm"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation-key"`
	BaseUrl       string `json:"base-url"`
	Insights      bool   `json:"insights"`
	Organization  int    `json:"organization"`

	// Optional flag to use rhc to register the system, which also always enables Insights.
	Rhc       *bool  `json:"rhc,omitempty"`
	ServerUrl string `json:"server-url"`
}

// UploadRequest defines model for UploadRequest.
type UploadRequest struct {
	Options interface{} `json:"options"`
	Type    UploadTypes `json:"type"`
}

// UploadStatus defines model for UploadStatus.
type UploadStatus struct {
	Options interface{}        `json:"options"`
	Status  UploadStatusStatus `json:"status"`
	Type    UploadTypes        `json:"type"`
}

// UploadStatusStatus defines model for UploadStatus.Status.
type UploadStatusStatus string

// UploadTypes defines model for UploadTypes.
type UploadTypes string

// User defines model for User.
type User struct {
	Name   string `json:"name"`
	SshKey string `json:"ssh_key"`
}

// Version defines model for Version.
type Version struct {
	Version string `json:"version"`
}

// ComposeImageJSONBody defines parameters for ComposeImage.
type ComposeImageJSONBody = ComposeRequest

// GetComposesParams defines parameters for GetComposes.
type GetComposesParams struct {
	// max amount of composes, default 100
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// composes page offset, default 0
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// CloneComposeJSONBody defines parameters for CloneCompose.
type CloneComposeJSONBody = CloneRequest

// GetComposeClonesParams defines parameters for GetComposeClones.
type GetComposeClonesParams struct {
	// max amount of clones, default 100
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// clones page offset, default 0
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetPackagesParams defines parameters for GetPackages.
type GetPackagesParams struct {
	// distribution to look up packages for
	Distribution Distributions `form:"distribution" json:"distribution"`

	// architecture to look up packages for
	Architecture GetPackagesParamsArchitecture `form:"architecture" json:"architecture"`

	// packages to look for
	Search string `form:"search" json:"search"`

	// max amount of packages, default 100
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// packages page offset, default 0
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetPackagesParamsArchitecture defines parameters for GetPackages.
type GetPackagesParamsArchitecture string

// ComposeImageJSONRequestBody defines body for ComposeImage for application/json ContentType.
type ComposeImageJSONRequestBody = ComposeImageJSONBody

// CloneComposeJSONRequestBody defines body for CloneCompose for application/json ContentType.
type CloneComposeJSONRequestBody = CloneComposeJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// get the architectures and their image types available for a given distribution
	// (GET /architectures/{distribution})
	GetArchitectures(ctx echo.Context, distribution string) error
	// get status of a compose clone
	// (GET /clones/{id})
	GetCloneStatus(ctx echo.Context, id openapi_types.UUID) error
	// compose image
	// (POST /compose)
	ComposeImage(ctx echo.Context) error
	// get a collection of previous compose requests for the logged in user
	// (GET /composes)
	GetComposes(ctx echo.Context, params GetComposesParams) error
	// delete a compose
	// (DELETE /composes/{composeId})
	DeleteCompose(ctx echo.Context, composeId openapi_types.UUID) error
	// get status of an image compose
	// (GET /composes/{composeId})
	GetComposeStatus(ctx echo.Context, composeId openapi_types.UUID) error
	// clone a compose
	// (POST /composes/{composeId}/clone)
	CloneCompose(ctx echo.Context, composeId openapi_types.UUID) error
	// get clones of a compose
	// (GET /composes/{composeId}/clones)
	GetComposeClones(ctx echo.Context, composeId openapi_types.UUID, params GetComposeClonesParams) error
	// get metadata of an image compose
	// (GET /composes/{composeId}/metadata)
	GetComposeMetadata(ctx echo.Context, composeId openapi_types.UUID) error
	// get the available distributions
	// (GET /distributions)
	GetDistributions(ctx echo.Context) error
	// get the openapi json specification
	// (GET /openapi.json)
	GetOpenapiJson(ctx echo.Context) error

	// (GET /packages)
	GetPackages(ctx echo.Context, params GetPackagesParams) error
	// return the readiness
	// (GET /ready)
	GetReadiness(ctx echo.Context) error
	// get the service version
	// (GET /version)
	GetVersion(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetArchitectures converts echo context to params.
func (w *ServerInterfaceWrapper) GetArchitectures(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "distribution" -------------
	var distribution string

	err = runtime.BindStyledParameterWithLocation("simple", false, "distribution", runtime.ParamLocationPath, ctx.Param("distribution"), &distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetArchitectures(ctx, distribution)
	return err
}

// GetCloneStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetCloneStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCloneStatus(ctx, id)
	return err
}

// ComposeImage converts echo context to params.
func (w *ServerInterfaceWrapper) ComposeImage(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ComposeImage(ctx)
	return err
}

// GetComposes converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposes(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetComposesParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposes(ctx, params)
	return err
}

// DeleteCompose converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCompose(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCompose(ctx, composeId)
	return err
}

// GetComposeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeStatus(ctx, composeId)
	return err
}

// CloneCompose converts echo context to params.
func (w *ServerInterfaceWrapper) CloneCompose(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CloneCompose(ctx, composeId)
	return err
}

// GetComposeClones converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeClones(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetComposeClonesParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeClones(ctx, composeId, params)
	return err
}

// GetComposeMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeMetadata(ctx, composeId)
	return err
}

// GetDistributions converts echo context to params.
func (w *ServerInterfaceWrapper) GetDistributions(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDistributions(ctx)
	return err
}

// GetOpenapiJson converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapiJson(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapiJson(ctx)
	return err
}

// GetPackages converts echo context to params.
func (w *ServerInterfaceWrapper) GetPackages(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPackagesParams
	// ------------- Required query parameter "distribution" -------------

	err = runtime.BindQueryParameter("form", true, true, "distribution", ctx.QueryParams(), &params.Distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// ------------- Required query parameter "architecture" -------------

	err = runtime.BindQueryParameter("form", true, true, "architecture", ctx.QueryParams(), &params.Architecture)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter architecture: %s", err))
	}

	// ------------- Required query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, true, "search", ctx.QueryParams(), &params.Search)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter search: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPackages(ctx, params)
	return err
}

// GetReadiness converts echo context to params.
func (w *ServerInterfaceWrapper) GetReadiness(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetReadiness(ctx)
	return err
}

// GetVersion converts echo context to params.
func (w *ServerInterfaceWrapper) GetVersion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVersion(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/architectures/:distribution", wrapper.GetArchitectures)
	router.GET(baseURL+"/clones/:id", wrapper.GetCloneStatus)
	router.POST(baseURL+"/compose", wrapper.ComposeImage)
	router.GET(baseURL+"/composes", wrapper.GetComposes)
	router.DELETE(baseURL+"/composes/:composeId", wrapper.DeleteCompose)
	router.GET(baseURL+"/composes/:composeId", wrapper.GetComposeStatus)
	router.POST(baseURL+"/composes/:composeId/clone", wrapper.CloneCompose)
	router.GET(baseURL+"/composes/:composeId/clones", wrapper.GetComposeClones)
	router.GET(baseURL+"/composes/:composeId/metadata", wrapper.GetComposeMetadata)
	router.GET(baseURL+"/distributions", wrapper.GetDistributions)
	router.GET(baseURL+"/openapi.json", wrapper.GetOpenapiJson)
	router.GET(baseURL+"/packages", wrapper.GetPackages)
	router.GET(baseURL+"/ready", wrapper.GetReadiness)
	router.GET(baseURL+"/version", wrapper.GetVersion)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
