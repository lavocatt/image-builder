// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Defines values for DistributionProfileItem.
const (
	XccdfOrgSsgprojectContentProfileAnssiBp28Enhanced     DistributionProfileItem = "xccdf_org.ssgproject.content_profile_anssi_bp28_enhanced"
	XccdfOrgSsgprojectContentProfileAnssiBp28High         DistributionProfileItem = "xccdf_org.ssgproject.content_profile_anssi_bp28_high"
	XccdfOrgSsgprojectContentProfileAnssiBp28Intermediary DistributionProfileItem = "xccdf_org.ssgproject.content_profile_anssi_bp28_intermediary"
	XccdfOrgSsgprojectContentProfileAnssiBp28Minimal      DistributionProfileItem = "xccdf_org.ssgproject.content_profile_anssi_bp28_minimal"
	XccdfOrgSsgprojectContentProfileCis                   DistributionProfileItem = "xccdf_org.ssgproject.content_profile_cis"
	XccdfOrgSsgprojectContentProfileCisServerL1           DistributionProfileItem = "xccdf_org.ssgproject.content_profile_cis_server_l1"
	XccdfOrgSsgprojectContentProfileCisWorkstationL1      DistributionProfileItem = "xccdf_org.ssgproject.content_profile_cis_workstation_l1"
	XccdfOrgSsgprojectContentProfileCisWorkstationL2      DistributionProfileItem = "xccdf_org.ssgproject.content_profile_cis_workstation_l2"
	XccdfOrgSsgprojectContentProfileCui                   DistributionProfileItem = "xccdf_org.ssgproject.content_profile_cui"
	XccdfOrgSsgprojectContentProfileE8                    DistributionProfileItem = "xccdf_org.ssgproject.content_profile_e8"
	XccdfOrgSsgprojectContentProfileHipaa                 DistributionProfileItem = "xccdf_org.ssgproject.content_profile_hipaa"
	XccdfOrgSsgprojectContentProfileIsmO                  DistributionProfileItem = "xccdf_org.ssgproject.content_profile_ism_o"
	XccdfOrgSsgprojectContentProfileOspp                  DistributionProfileItem = "xccdf_org.ssgproject.content_profile_ospp"
	XccdfOrgSsgprojectContentProfilePciDss                DistributionProfileItem = "xccdf_org.ssgproject.content_profile_pci-dss"
	XccdfOrgSsgprojectContentProfileStandard              DistributionProfileItem = "xccdf_org.ssgproject.content_profile_standard"
	XccdfOrgSsgprojectContentProfileStig                  DistributionProfileItem = "xccdf_org.ssgproject.content_profile_stig"
	XccdfOrgSsgprojectContentProfileStigGui               DistributionProfileItem = "xccdf_org.ssgproject.content_profile_stig_gui"
)

// Defines values for Distributions.
const (
	Centos8      Distributions = "centos-8"
	Centos9      Distributions = "centos-9"
	Fedora37     Distributions = "fedora-37"
	Fedora38     Distributions = "fedora-38"
	Fedora39     Distributions = "fedora-39"
	Fedora40     Distributions = "fedora-40"
	Rhel8        Distributions = "rhel-8"
	Rhel84       Distributions = "rhel-84"
	Rhel85       Distributions = "rhel-85"
	Rhel86       Distributions = "rhel-86"
	Rhel87       Distributions = "rhel-87"
	Rhel88       Distributions = "rhel-88"
	Rhel8Nightly Distributions = "rhel-8-nightly"
	Rhel9        Distributions = "rhel-9"
	Rhel90       Distributions = "rhel-90"
	Rhel91       Distributions = "rhel-91"
	Rhel92       Distributions = "rhel-92"
	Rhel9Nightly Distributions = "rhel-9-nightly"
)

// Defines values for ImageRequestArchitecture.
const (
	ImageRequestArchitectureAarch64 ImageRequestArchitecture = "aarch64"
	ImageRequestArchitectureX8664   ImageRequestArchitecture = "x86_64"
)

// Defines values for ImageStatusStatus.
const (
	ImageStatusStatusBuilding    ImageStatusStatus = "building"
	ImageStatusStatusFailure     ImageStatusStatus = "failure"
	ImageStatusStatusPending     ImageStatusStatus = "pending"
	ImageStatusStatusRegistering ImageStatusStatus = "registering"
	ImageStatusStatusSuccess     ImageStatusStatus = "success"
	ImageStatusStatusUploading   ImageStatusStatus = "uploading"
)

// Defines values for ImageTypes.
const (
	ImageTypesAmi               ImageTypes = "ami"
	ImageTypesAws               ImageTypes = "aws"
	ImageTypesAzure             ImageTypes = "azure"
	ImageTypesEdgeCommit        ImageTypes = "edge-commit"
	ImageTypesEdgeInstaller     ImageTypes = "edge-installer"
	ImageTypesGcp               ImageTypes = "gcp"
	ImageTypesGuestImage        ImageTypes = "guest-image"
	ImageTypesImageInstaller    ImageTypes = "image-installer"
	ImageTypesRhelEdgeCommit    ImageTypes = "rhel-edge-commit"
	ImageTypesRhelEdgeInstaller ImageTypes = "rhel-edge-installer"
	ImageTypesVhd               ImageTypes = "vhd"
	ImageTypesVsphere           ImageTypes = "vsphere"
	ImageTypesVsphereOva        ImageTypes = "vsphere-ova"
	ImageTypesWsl               ImageTypes = "wsl"
)

// Defines values for UploadStatusStatus.
const (
	UploadStatusStatusFailure UploadStatusStatus = "failure"
	UploadStatusStatusPending UploadStatusStatus = "pending"
	UploadStatusStatusRunning UploadStatusStatus = "running"
	UploadStatusStatusSuccess UploadStatusStatus = "success"
)

// Defines values for UploadTypes.
const (
	UploadTypesAws   UploadTypes = "aws"
	UploadTypesAwsS3 UploadTypes = "aws.s3"
	UploadTypesAzure UploadTypes = "azure"
	UploadTypesGcp   UploadTypes = "gcp"
)

// Defines values for GetPackagesParamsArchitecture.
const (
	GetPackagesParamsArchitectureAarch64 GetPackagesParamsArchitecture = "aarch64"
	GetPackagesParamsArchitectureX8664   GetPackagesParamsArchitecture = "x86_64"
)

// AWSEC2Clone defines model for AWSEC2Clone.
type AWSEC2Clone struct {
	// Region A region as described in
	// https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-regions
	Region string `json:"region"`

	// ShareWithAccounts An array of AWS account IDs as described in
	// https://docs.aws.amazon.com/IAM/latest/UserGuide/console_account-alias.html
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
	ShareWithSources  *[]string `json:"share_with_sources,omitempty"`
}

// AWSS3UploadRequestOptions defines model for AWSS3UploadRequestOptions.
type AWSS3UploadRequestOptions = map[string]interface{}

// AWSS3UploadStatus defines model for AWSS3UploadStatus.
type AWSS3UploadStatus struct {
	Url string `json:"url"`
}

// AWSUploadRequestOptions defines model for AWSUploadRequestOptions.
type AWSUploadRequestOptions struct {
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
	ShareWithSources  *[]string `json:"share_with_sources,omitempty"`
}

// AWSUploadStatus defines model for AWSUploadStatus.
type AWSUploadStatus struct {
	Ami    string `json:"ami"`
	Region string `json:"region"`
}

// ArchitectureItem defines model for ArchitectureItem.
type ArchitectureItem struct {
	Arch       string   `json:"arch"`
	ImageTypes []string `json:"image_types"`

	// Repositories Base repositories for the given distribution and architecture.
	Repositories []Repository `json:"repositories"`
}

// Architectures defines model for Architectures.
type Architectures = []ArchitectureItem

// AzureUploadRequestOptions defines model for AzureUploadRequestOptions.
type AzureUploadRequestOptions struct {
	// ImageName Name of the created image.
	// Must begin with a letter or number, end with a letter, number or underscore, and may contain only letters, numbers, underscores, periods, or hyphens.
	// The total length is limited to 60 characters.
	ImageName *string `json:"image_name,omitempty"`

	// ResourceGroup Name of the resource group where the image should be uploaded.
	ResourceGroup string `json:"resource_group"`

	// SourceId ID of the source that will be used to resolve the tenant and subscription IDs.
	// Do not provide a tenant_id or subscription_id when providing a source_id.
	SourceId *string `json:"source_id,omitempty"`

	// SubscriptionId ID of subscription where the image should be uploaded.
	// When providing a subscription_id, also be sure to provide a tenant_id and do not include a source_id.
	SubscriptionId *string `json:"subscription_id,omitempty"`

	// TenantId ID of the tenant where the image should be uploaded. This link explains how
	// to find it in the Azure Portal:
	// https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant
	// When providing a tenant_id, also be sure to provide a subscription_id and do not include a source_id.
	TenantId *string `json:"tenant_id,omitempty"`
}

// AzureUploadStatus defines model for AzureUploadStatus.
type AzureUploadStatus struct {
	ImageName string `json:"image_name"`
}

// CloneRequest defines model for CloneRequest.
type CloneRequest struct {
	union json.RawMessage
}

// CloneResponse defines model for CloneResponse.
type CloneResponse struct {
	Id openapi_types.UUID `json:"id"`
}

// ClonesResponse defines model for ClonesResponse.
type ClonesResponse struct {
	Data  []ClonesResponseItem `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// ClonesResponseItem defines model for ClonesResponseItem.
type ClonesResponseItem struct {
	// ComposeId UUID of the parent compose of the clone
	ComposeId openapi_types.UUID `json:"compose_id"`
	CreatedAt string             `json:"created_at"`
	Id        openapi_types.UUID `json:"id"`
	Request   CloneRequest       `json:"request"`
}

// ComposeMetadata defines model for ComposeMetadata.
type ComposeMetadata struct {
	// OstreeCommit ID (hash) of the built commit
	OstreeCommit *string `json:"ostree_commit,omitempty"`

	// Packages Package list including NEVRA
	Packages *[]PackageMetadata `json:"packages,omitempty"`
}

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	Customizations *Customizations `json:"customizations,omitempty"`

	// Distribution List of all distributions that image builder supports. A user might not have access to
	// restricted distributions.
	//
	// Restricted distributions include the RHEL nightlies and the Fedora distributions.
	Distribution     Distributions `json:"distribution"`
	ImageDescription *string       `json:"image_description,omitempty"`
	ImageName        *string       `json:"image_name,omitempty"`

	// ImageRequests Array of exactly one image request. Having more image requests in one compose is currently not supported.
	ImageRequests []ImageRequest `json:"image_requests"`
}

// ComposeResponse defines model for ComposeResponse.
type ComposeResponse struct {
	Id openapi_types.UUID `json:"id"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	ImageStatus ImageStatus    `json:"image_status"`
	Request     ComposeRequest `json:"request"`
}

// ComposeStatusError defines model for ComposeStatusError.
type ComposeStatusError struct {
	Details *interface{} `json:"details,omitempty"`
	Id      int          `json:"id"`
	Reason  string       `json:"reason"`
}

// ComposesResponse defines model for ComposesResponse.
type ComposesResponse struct {
	Data  []ComposesResponseItem `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// ComposesResponseItem defines model for ComposesResponseItem.
type ComposesResponseItem struct {
	CreatedAt string             `json:"created_at"`
	Id        openapi_types.UUID `json:"id"`
	ImageName *string            `json:"image_name,omitempty"`
	Request   ComposeRequest     `json:"request"`
}

// CustomRepository Repository configuration for custom repositories.
// At least one of the 'baseurl', 'mirrorlist', 'metalink' properties must
// be specified. If more of them are specified, the order of precedence is
// the same as listed above. Id is required.
type CustomRepository struct {
	Baseurl      *[]string `json:"baseurl,omitempty"`
	CheckGpg     *bool     `json:"check_gpg,omitempty"`
	CheckRepoGpg *bool     `json:"check_repo_gpg,omitempty"`
	Enabled      *bool     `json:"enabled,omitempty"`
	Filename     *string   `json:"filename,omitempty"`

	// Gpgkey GPG key used to sign packages in this repository. Can be a gpg key or a URL
	Gpgkey     *[]string `json:"gpgkey,omitempty"`
	Id         string    `json:"id"`
	Metalink   *string   `json:"metalink,omitempty"`
	Mirrorlist *string   `json:"mirrorlist,omitempty"`
	Name       *string   `json:"name,omitempty"`
	Priority   *int      `json:"priority,omitempty"`
	SslVerify  *bool     `json:"ssl_verify,omitempty"`
}

// Customizations defines model for Customizations.
type Customizations struct {
	CustomRepositories  *[]CustomRepository `json:"custom_repositories,omitempty"`
	Filesystem          *[]Filesystem       `json:"filesystem,omitempty"`
	Openscap            *OpenSCAP           `json:"openscap,omitempty"`
	Packages            *[]string           `json:"packages,omitempty"`
	PayloadRepositories *[]Repository       `json:"payload_repositories,omitempty"`
	Subscription        *Subscription       `json:"subscription,omitempty"`

	// Users list of users that a customer can add, also specifying their respective groups and SSH keys
	Users *[]User `json:"users,omitempty"`
}

// DistributionItem defines model for DistributionItem.
type DistributionItem struct {
	Description string `json:"description"`
	Name        string `json:"name"`
}

// DistributionProfileItem defines model for DistributionProfileItem.
type DistributionProfileItem string

// DistributionProfileResponse List of profiles for a given distribution
type DistributionProfileResponse = []DistributionProfileItem

// Distributions List of all distributions that image builder supports. A user might not have access to
// restricted distributions.
//
// Restricted distributions include the RHEL nightlies and the Fedora distributions.
type Distributions string

// DistributionsResponse List of distributions this user is allowed to build.
type DistributionsResponse = []DistributionItem

// Filesystem defines model for Filesystem.
type Filesystem struct {
	// MinSize size of the filesystem in bytes
	MinSize    uint64 `json:"min_size"`
	Mountpoint string `json:"mountpoint"`
}

// GCPUploadRequestOptions defines model for GCPUploadRequestOptions.
type GCPUploadRequestOptions struct {
	// ShareWithAccounts List of valid Google accounts to share the imported Compute Node image with.
	// Each string must contain a specifier of the account type. Valid formats are:
	//   - 'user:{emailid}': An email address that represents a specific
	//     Google account. For example, 'alice@example.com'.
	//   - 'serviceAccount:{emailid}': An email address that represents a
	//     service account. For example, 'my-other-app@appspot.gserviceaccount.com'.
	//   - 'group:{emailid}': An email address that represents a Google group.
	//     For example, 'admins@example.com'.
	//   - 'domain:{domain}': The G Suite domain (primary) that represents all
	//     the users of that domain. For example, 'google.com' or 'example.com'.
	//     If not specified, the imported Compute Node image is not shared with any
	//     account.
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
}

// GCPUploadStatus defines model for GCPUploadStatus.
type GCPUploadStatus struct {
	ImageName string `json:"image_name"`
	ProjectId string `json:"project_id"`
}

// HTTPError defines model for HTTPError.
type HTTPError struct {
	Detail string `json:"detail"`
	Title  string `json:"title"`
}

// HTTPErrorList defines model for HTTPErrorList.
type HTTPErrorList struct {
	Errors []HTTPError `json:"errors"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {
	// Architecture CPU architecture of the image, x86_64 and aarch64 are currently supported.
	Architecture ImageRequestArchitecture `json:"architecture"`
	ImageType    ImageTypes               `json:"image_type"`
	Ostree       *OSTree                  `json:"ostree,omitempty"`

	// Size Size of image, in bytes. When set to 0 the image size is a minimum
	// defined by the image type.
	Size          *uint64       `json:"size,omitempty"`
	UploadRequest UploadRequest `json:"upload_request"`
}

// ImageRequestArchitecture CPU architecture of the image, x86_64 and aarch64 are currently supported.
type ImageRequestArchitecture string

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Error        *ComposeStatusError `json:"error,omitempty"`
	Status       ImageStatusStatus   `json:"status"`
	UploadStatus *UploadStatus       `json:"upload_status,omitempty"`
}

// ImageStatusStatus defines model for ImageStatus.Status.
type ImageStatusStatus string

// ImageTypes defines model for ImageTypes.
type ImageTypes string

// OSTree defines model for OSTree.
type OSTree struct {
	// Contenturl A URL which, if set, is used for fetching content. Implies that `url` is set as well,
	// which will be used for metadata only.
	Contenturl *string `json:"contenturl,omitempty"`

	// Parent Can be either a commit (example: 02604b2da6e954bd34b8b82a835e5a77d2b60ffa), or a branch-like reference (example: rhel/8/x86_64/edge)
	Parent *string `json:"parent,omitempty"`
	Ref    *string `json:"ref,omitempty"`

	// Rhsm Determines whether a valid subscription manager (candlepin) identity is required to
	// access this repository. Consumer certificates will be used as client certificates when
	// fetching metadata and content.
	Rhsm *bool   `json:"rhsm,omitempty"`
	Url  *string `json:"url,omitempty"`
}

// OpenSCAP defines model for OpenSCAP.
type OpenSCAP struct {
	ProfileId string `json:"profile_id"`
}

// Package defines model for Package.
type Package struct {
	Name    string `json:"name"`
	Summary string `json:"summary"`
}

// PackageMetadata defines model for PackageMetadata.
type PackageMetadata struct {
	Arch      string  `json:"arch"`
	Epoch     *string `json:"epoch,omitempty"`
	Name      string  `json:"name"`
	Release   string  `json:"release"`
	Sigmd5    string  `json:"sigmd5"`
	Signature *string `json:"signature,omitempty"`
	Type      string  `json:"type"`
	Version   string  `json:"version"`
}

// PackagesResponse defines model for PackagesResponse.
type PackagesResponse struct {
	Data  []Package `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// Readiness defines model for Readiness.
type Readiness struct {
	Readiness string `json:"readiness"`
}

// Repository defines model for Repository.
type Repository struct {
	Baseurl  *string `json:"baseurl,omitempty"`
	CheckGpg *bool   `json:"check_gpg,omitempty"`

	// CheckRepoGpg Enables gpg verification of the repository metadata
	CheckRepoGpg *bool   `json:"check_repo_gpg,omitempty"`
	Gpgkey       *string `json:"gpgkey,omitempty"`
	IgnoreSsl    *bool   `json:"ignore_ssl,omitempty"`
	Metalink     *string `json:"metalink,omitempty"`
	Mirrorlist   *string `json:"mirrorlist,omitempty"`
	Rhsm         bool    `json:"rhsm"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation-key"`
	BaseUrl       string `json:"base-url"`
	Insights      bool   `json:"insights"`
	Organization  int    `json:"organization"`

	// Rhc Optional flag to use rhc to register the system, which also always enables Insights.
	Rhc       *bool  `json:"rhc,omitempty"`
	ServerUrl string `json:"server-url"`
}

// UploadRequest defines model for UploadRequest.
type UploadRequest struct {
	Options UploadRequest_Options `json:"options"`
	Type    UploadTypes           `json:"type"`
}

// UploadRequest_Options defines model for UploadRequest.Options.
type UploadRequest_Options struct {
	union json.RawMessage
}

// UploadStatus defines model for UploadStatus.
type UploadStatus struct {
	Options UploadStatus_Options `json:"options"`
	Status  UploadStatusStatus   `json:"status"`
	Type    UploadTypes          `json:"type"`
}

// UploadStatus_Options defines model for UploadStatus.Options.
type UploadStatus_Options struct {
	union json.RawMessage
}

// UploadStatusStatus defines model for UploadStatus.Status.
type UploadStatusStatus string

// UploadTypes defines model for UploadTypes.
type UploadTypes string

// User defines model for User.
type User struct {
	Name   string `json:"name"`
	SshKey string `json:"ssh_key"`
}

// Version defines model for Version.
type Version struct {
	Version string `json:"version"`
}

// GetComposesParams defines parameters for GetComposes.
type GetComposesParams struct {
	// Limit max amount of composes, default 100
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset composes page offset, default 0
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// IgnoreImageTypes Filter the composes on image type. The filter is optional and can be specified multiple times.
	IgnoreImageTypes *[]ImageTypes `form:"ignoreImageTypes,omitempty" json:"ignoreImageTypes,omitempty"`
}

// GetComposeClonesParams defines parameters for GetComposeClones.
type GetComposeClonesParams struct {
	// Limit max amount of clones, default 100
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset clones page offset, default 0
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetPackagesParams defines parameters for GetPackages.
type GetPackagesParams struct {
	// Distribution distribution to look up packages for
	Distribution Distributions `form:"distribution" json:"distribution"`

	// Architecture architecture to look up packages for
	Architecture GetPackagesParamsArchitecture `form:"architecture" json:"architecture"`

	// Search packages to look for
	Search string `form:"search" json:"search"`

	// Limit max amount of packages, default 100
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset packages page offset, default 0
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetPackagesParamsArchitecture defines parameters for GetPackages.
type GetPackagesParamsArchitecture string

// ComposeImageJSONRequestBody defines body for ComposeImage for application/json ContentType.
type ComposeImageJSONRequestBody = ComposeRequest

// CloneComposeJSONRequestBody defines body for CloneCompose for application/json ContentType.
type CloneComposeJSONRequestBody = CloneRequest

// AsAWSEC2Clone returns the union data inside the CloneRequest as a AWSEC2Clone
func (t CloneRequest) AsAWSEC2Clone() (AWSEC2Clone, error) {
	var body AWSEC2Clone
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAWSEC2Clone overwrites any union data inside the CloneRequest as the provided AWSEC2Clone
func (t *CloneRequest) FromAWSEC2Clone(v AWSEC2Clone) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAWSEC2Clone performs a merge with any union data inside the CloneRequest, using the provided AWSEC2Clone
func (t *CloneRequest) MergeAWSEC2Clone(v AWSEC2Clone) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t CloneRequest) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CloneRequest) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsAWSUploadRequestOptions returns the union data inside the UploadRequest_Options as a AWSUploadRequestOptions
func (t UploadRequest_Options) AsAWSUploadRequestOptions() (AWSUploadRequestOptions, error) {
	var body AWSUploadRequestOptions
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAWSUploadRequestOptions overwrites any union data inside the UploadRequest_Options as the provided AWSUploadRequestOptions
func (t *UploadRequest_Options) FromAWSUploadRequestOptions(v AWSUploadRequestOptions) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAWSUploadRequestOptions performs a merge with any union data inside the UploadRequest_Options, using the provided AWSUploadRequestOptions
func (t *UploadRequest_Options) MergeAWSUploadRequestOptions(v AWSUploadRequestOptions) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsAWSS3UploadRequestOptions returns the union data inside the UploadRequest_Options as a AWSS3UploadRequestOptions
func (t UploadRequest_Options) AsAWSS3UploadRequestOptions() (AWSS3UploadRequestOptions, error) {
	var body AWSS3UploadRequestOptions
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAWSS3UploadRequestOptions overwrites any union data inside the UploadRequest_Options as the provided AWSS3UploadRequestOptions
func (t *UploadRequest_Options) FromAWSS3UploadRequestOptions(v AWSS3UploadRequestOptions) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAWSS3UploadRequestOptions performs a merge with any union data inside the UploadRequest_Options, using the provided AWSS3UploadRequestOptions
func (t *UploadRequest_Options) MergeAWSS3UploadRequestOptions(v AWSS3UploadRequestOptions) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsGCPUploadRequestOptions returns the union data inside the UploadRequest_Options as a GCPUploadRequestOptions
func (t UploadRequest_Options) AsGCPUploadRequestOptions() (GCPUploadRequestOptions, error) {
	var body GCPUploadRequestOptions
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGCPUploadRequestOptions overwrites any union data inside the UploadRequest_Options as the provided GCPUploadRequestOptions
func (t *UploadRequest_Options) FromGCPUploadRequestOptions(v GCPUploadRequestOptions) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGCPUploadRequestOptions performs a merge with any union data inside the UploadRequest_Options, using the provided GCPUploadRequestOptions
func (t *UploadRequest_Options) MergeGCPUploadRequestOptions(v GCPUploadRequestOptions) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsAzureUploadRequestOptions returns the union data inside the UploadRequest_Options as a AzureUploadRequestOptions
func (t UploadRequest_Options) AsAzureUploadRequestOptions() (AzureUploadRequestOptions, error) {
	var body AzureUploadRequestOptions
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAzureUploadRequestOptions overwrites any union data inside the UploadRequest_Options as the provided AzureUploadRequestOptions
func (t *UploadRequest_Options) FromAzureUploadRequestOptions(v AzureUploadRequestOptions) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAzureUploadRequestOptions performs a merge with any union data inside the UploadRequest_Options, using the provided AzureUploadRequestOptions
func (t *UploadRequest_Options) MergeAzureUploadRequestOptions(v AzureUploadRequestOptions) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t UploadRequest_Options) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *UploadRequest_Options) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsAWSUploadStatus returns the union data inside the UploadStatus_Options as a AWSUploadStatus
func (t UploadStatus_Options) AsAWSUploadStatus() (AWSUploadStatus, error) {
	var body AWSUploadStatus
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAWSUploadStatus overwrites any union data inside the UploadStatus_Options as the provided AWSUploadStatus
func (t *UploadStatus_Options) FromAWSUploadStatus(v AWSUploadStatus) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAWSUploadStatus performs a merge with any union data inside the UploadStatus_Options, using the provided AWSUploadStatus
func (t *UploadStatus_Options) MergeAWSUploadStatus(v AWSUploadStatus) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsAWSS3UploadStatus returns the union data inside the UploadStatus_Options as a AWSS3UploadStatus
func (t UploadStatus_Options) AsAWSS3UploadStatus() (AWSS3UploadStatus, error) {
	var body AWSS3UploadStatus
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAWSS3UploadStatus overwrites any union data inside the UploadStatus_Options as the provided AWSS3UploadStatus
func (t *UploadStatus_Options) FromAWSS3UploadStatus(v AWSS3UploadStatus) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAWSS3UploadStatus performs a merge with any union data inside the UploadStatus_Options, using the provided AWSS3UploadStatus
func (t *UploadStatus_Options) MergeAWSS3UploadStatus(v AWSS3UploadStatus) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsGCPUploadStatus returns the union data inside the UploadStatus_Options as a GCPUploadStatus
func (t UploadStatus_Options) AsGCPUploadStatus() (GCPUploadStatus, error) {
	var body GCPUploadStatus
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGCPUploadStatus overwrites any union data inside the UploadStatus_Options as the provided GCPUploadStatus
func (t *UploadStatus_Options) FromGCPUploadStatus(v GCPUploadStatus) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGCPUploadStatus performs a merge with any union data inside the UploadStatus_Options, using the provided GCPUploadStatus
func (t *UploadStatus_Options) MergeGCPUploadStatus(v GCPUploadStatus) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsAzureUploadStatus returns the union data inside the UploadStatus_Options as a AzureUploadStatus
func (t UploadStatus_Options) AsAzureUploadStatus() (AzureUploadStatus, error) {
	var body AzureUploadStatus
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAzureUploadStatus overwrites any union data inside the UploadStatus_Options as the provided AzureUploadStatus
func (t *UploadStatus_Options) FromAzureUploadStatus(v AzureUploadStatus) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAzureUploadStatus performs a merge with any union data inside the UploadStatus_Options, using the provided AzureUploadStatus
func (t *UploadStatus_Options) MergeAzureUploadStatus(v AzureUploadStatus) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t UploadStatus_Options) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *UploadStatus_Options) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// get the architectures and their image types available for a given distribution
	// (GET /architectures/{distribution})
	GetArchitectures(ctx echo.Context, distribution Distributions) error
	// get status of a compose clone
	// (GET /clones/{id})
	GetCloneStatus(ctx echo.Context, id openapi_types.UUID) error
	// compose image
	// (POST /compose)
	ComposeImage(ctx echo.Context) error
	// get a collection of previous compose requests for the logged in user
	// (GET /composes)
	GetComposes(ctx echo.Context, params GetComposesParams) error
	// delete a compose
	// (DELETE /composes/{composeId})
	DeleteCompose(ctx echo.Context, composeId openapi_types.UUID) error
	// get status of an image compose
	// (GET /composes/{composeId})
	GetComposeStatus(ctx echo.Context, composeId openapi_types.UUID) error
	// clone a compose
	// (POST /composes/{composeId}/clone)
	CloneCompose(ctx echo.Context, composeId openapi_types.UUID) error
	// get clones of a compose
	// (GET /composes/{composeId}/clones)
	GetComposeClones(ctx echo.Context, composeId openapi_types.UUID, params GetComposeClonesParams) error
	// get metadata of an image compose
	// (GET /composes/{composeId}/metadata)
	GetComposeMetadata(ctx echo.Context, composeId openapi_types.UUID) error
	// get the distributions available to this user
	// (GET /distributions)
	GetDistributions(ctx echo.Context) error
	// get the openapi json specification
	// (GET /openapi.json)
	GetOpenapiJson(ctx echo.Context) error
	// get the available profiles for a given distribution
	// (GET /oscap/{distribution}/profiles)
	GetOscapProfiles(ctx echo.Context, distribution Distributions) error
	// get the customizations for a given distribution and profile
	// (GET /oscap/{distribution}/{profile}/customizations)
	GetOscapCustomizations(ctx echo.Context, distribution Distributions, profile DistributionProfileItem) error

	// (GET /packages)
	GetPackages(ctx echo.Context, params GetPackagesParams) error
	// return the readiness
	// (GET /ready)
	GetReadiness(ctx echo.Context) error
	// get the service version
	// (GET /version)
	GetVersion(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetArchitectures converts echo context to params.
func (w *ServerInterfaceWrapper) GetArchitectures(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "distribution" -------------
	var distribution Distributions

	err = runtime.BindStyledParameterWithLocation("simple", false, "distribution", runtime.ParamLocationPath, ctx.Param("distribution"), &distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetArchitectures(ctx, distribution)
	return err
}

// GetCloneStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetCloneStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCloneStatus(ctx, id)
	return err
}

// ComposeImage converts echo context to params.
func (w *ServerInterfaceWrapper) ComposeImage(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ComposeImage(ctx)
	return err
}

// GetComposes converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposes(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetComposesParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "ignoreImageTypes" -------------

	err = runtime.BindQueryParameter("form", true, false, "ignoreImageTypes", ctx.QueryParams(), &params.IgnoreImageTypes)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ignoreImageTypes: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposes(ctx, params)
	return err
}

// DeleteCompose converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCompose(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCompose(ctx, composeId)
	return err
}

// GetComposeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeStatus(ctx, composeId)
	return err
}

// CloneCompose converts echo context to params.
func (w *ServerInterfaceWrapper) CloneCompose(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CloneCompose(ctx, composeId)
	return err
}

// GetComposeClones converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeClones(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetComposeClonesParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeClones(ctx, composeId, params)
	return err
}

// GetComposeMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeMetadata(ctx, composeId)
	return err
}

// GetDistributions converts echo context to params.
func (w *ServerInterfaceWrapper) GetDistributions(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDistributions(ctx)
	return err
}

// GetOpenapiJson converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapiJson(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapiJson(ctx)
	return err
}

// GetOscapProfiles converts echo context to params.
func (w *ServerInterfaceWrapper) GetOscapProfiles(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "distribution" -------------
	var distribution Distributions

	err = runtime.BindStyledParameterWithLocation("simple", false, "distribution", runtime.ParamLocationPath, ctx.Param("distribution"), &distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOscapProfiles(ctx, distribution)
	return err
}

// GetOscapCustomizations converts echo context to params.
func (w *ServerInterfaceWrapper) GetOscapCustomizations(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "distribution" -------------
	var distribution Distributions

	err = runtime.BindStyledParameterWithLocation("simple", false, "distribution", runtime.ParamLocationPath, ctx.Param("distribution"), &distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// ------------- Path parameter "profile" -------------
	var profile DistributionProfileItem

	err = runtime.BindStyledParameterWithLocation("simple", false, "profile", runtime.ParamLocationPath, ctx.Param("profile"), &profile)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter profile: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOscapCustomizations(ctx, distribution, profile)
	return err
}

// GetPackages converts echo context to params.
func (w *ServerInterfaceWrapper) GetPackages(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPackagesParams
	// ------------- Required query parameter "distribution" -------------

	err = runtime.BindQueryParameter("form", true, true, "distribution", ctx.QueryParams(), &params.Distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// ------------- Required query parameter "architecture" -------------

	err = runtime.BindQueryParameter("form", true, true, "architecture", ctx.QueryParams(), &params.Architecture)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter architecture: %s", err))
	}

	// ------------- Required query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, true, "search", ctx.QueryParams(), &params.Search)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter search: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPackages(ctx, params)
	return err
}

// GetReadiness converts echo context to params.
func (w *ServerInterfaceWrapper) GetReadiness(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetReadiness(ctx)
	return err
}

// GetVersion converts echo context to params.
func (w *ServerInterfaceWrapper) GetVersion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVersion(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/architectures/:distribution", wrapper.GetArchitectures)
	router.GET(baseURL+"/clones/:id", wrapper.GetCloneStatus)
	router.POST(baseURL+"/compose", wrapper.ComposeImage)
	router.GET(baseURL+"/composes", wrapper.GetComposes)
	router.DELETE(baseURL+"/composes/:composeId", wrapper.DeleteCompose)
	router.GET(baseURL+"/composes/:composeId", wrapper.GetComposeStatus)
	router.POST(baseURL+"/composes/:composeId/clone", wrapper.CloneCompose)
	router.GET(baseURL+"/composes/:composeId/clones", wrapper.GetComposeClones)
	router.GET(baseURL+"/composes/:composeId/metadata", wrapper.GetComposeMetadata)
	router.GET(baseURL+"/distributions", wrapper.GetDistributions)
	router.GET(baseURL+"/openapi.json", wrapper.GetOpenapiJson)
	router.GET(baseURL+"/oscap/:distribution/profiles", wrapper.GetOscapProfiles)
	router.GET(baseURL+"/oscap/:distribution/:profile/customizations", wrapper.GetOscapCustomizations)
	router.GET(baseURL+"/packages", wrapper.GetPackages)
	router.GET(baseURL+"/ready", wrapper.GetReadiness)
	router.GET(baseURL+"/version", wrapper.GetVersion)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
